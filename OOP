I . Giới thiệu OOP ( object oriented programming ) 
- OOP giúp viết code dễ bảo trì và có thể tái sử dụng 
- Mô hình hóa thế giới thực 
- giảm thiểu lỗi và cải thiện làm việc nhóm 

1 OOP xoay quanh 4 yếu tố 
 - tính đóng gói ( Encapsulation )
 - tính kế thừa ( Inheritance )
 - tính đa hình ( Polymorphism ) 
 - tính trừu tượng ( Abstraction )

1.1 Tính đóng gói 
+ Hiểu đơn giản là đóng gói dữ liệu nhằm giúp bảo vệ dữ liệu nhạy cảm và chỉ có thể gọi lại bằng hàm cụ thể 
vd  
[
      class BankAccount:
          def __init__(self, owner, balance):
              self.owner = owner
              self.__balance = balance  # Dữ liệu riêng tư
      
          def deposit(self, amount):
              self.__balance += amount
              print(f"Deposited {amount}. New balance: {self.__balance}")
      
          def get_balance(self):
              return self.__balance  # Chỉ có thể xem số dư qua phương thức này
      
      # Tạo tài khoản ngân hàng
      acc = BankAccount("Alice", 1000)
      
      print(acc.get_balance())  # ✅ Output: 1000
      print(acc.__balance)  # ❌ Lỗi: Không thể truy cập trực tiếp!      ]

1.2 Tính kế thừa
+ Cho phép lớp con kế thừa từ lớp con để tái sử dụng lại code và có thể mở tộng thêm  
+ Class con có thể ghi đè lên class cha nếu cần 
vd 
[ 
      class person:
          def __init__(self,name):
              self.name = name
          def introduce(self):
              print(f'my name is {self.name}')
      
      class student(person):
          def __init__(self,name,grade):
              super().__init__(name)
              self.grade = grade
          
          def introduce(self):
              print(f'my name is {self.name} and i am in grade {self.grade}')
      
      P = person('John')
      S = student('Alice', 12)
      
      P.introduce()
      S.introduce()      ]

1.3 Tính đa hình 
+ Cho phép các đối tượng của các lớp khác nhau có thể được xử lý thông qua cùng một giao diện hoặc phương thức nhưng với cách thực thi khác nhau tùy đối tượng 
vd 
[
      class Bird: # bài mẫu
          def fly(self):
              print("Chim đang bay...")
      
      class Eagle(Bird):
          def fly(self):
              print("Đại bàng bay rất cao!")
      
      class Penguin(Bird):
          def fly(self):
              print("Chim cánh cụt không biết bay!")
      
      birds = [Bird(),Eagle(), Penguin()]
      
      for bird in birds:
          bird.fly()      ]

+ Method overriding 
 Ghi đè để thực thi theo cách riêng 
[
    # Lớp cha
    class Animal:
        def speak(self):
            return "Some sound"
    
    # Lớp con kế thừa từ Animal
    class Dog(Animal):
        def speak(self):  # Ghi đè phương thức speak()
            return "Gâu gâu"
    
    class Cat(Animal):
        def speak(self):  # Ghi đè phương thức speak()
            return "Meo meo"
    
    # Sử dụng đa hình
    animals = [Dog(), Cat(), Animal()]
    
    for animal in animals:
        print(animal.speak())   ]  


1.4 Tính trừu tượng
+ Giúp ẩn các chi tiết và chỉ hiển thị các thông tin cần thiết 
+ Lớp không thể tạo đối tượng trực tiếp 
+ Phương thức chỉ có code khai báo và không có thực thi 
+ Trước khi tạo lớp trừu tượng thêm 
# from abc import ABC , abstractmethod #




